{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"insiders","text":"<p>Manage your Insiders projects.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install insiders\n</code></pre> <p>With <code>uv</code>:</p> <pre><code>uv tool install insiders\n</code></pre>"},{"location":"#usage","title":"Usage","text":""},{"location":"#insiders","title":"<code>insiders</code>","text":"<p>Manage your Insiders projects.</p> <p>This tool lets you manage your local and remote Git repositories for projects that offer an Insiders version.</p> <p>See the documentation / help text of the different subcommands available.</p> <p>Example</p> <pre><code>insiders --debug-info\n</code></pre> <p>Options</p> <ul> <li><code>-h</code>, <code>--help</code>: Print the program help and exit. Default: <code>False</code>.</li> <li><code>-V</code>, <code>--version</code>: Print the program version and exit. Default: <code>False</code>.</li> <li><code>--debug-info</code>: Print debug information. Default: <code>False</code>.</li> <li><code>--completion</code> <code>COMPLETION</code>: Print shell-specific completion source. Default: <code>False</code>.</li> </ul> <p>Subcommands</p>"},{"location":"#create","title":"<code>create</code>","text":"<p>Create public/insiders repositories.</p> <p>This command will do several things:</p> <ul> <li>Create public and insiders repositories on GitHub     (using the provided namespace, username, repository name, description, etc.).</li> <li>Clone these two repositories locally (using the provided repository paths).</li> <li>Initialize the public repository with a <code>README</code> and a dummy CI job that always passes.</li> <li>Optionally initialize the insiders repository by generating initial contents     using the specified Copier template.</li> </ul> <p>Example 1 - Project in user's namespace</p> <p>The insiders namespace, insiders repository name and username are inferred from the namespace and repository name.</p> <pre><code>insiders create \\\n    -n pawamoy \\\n    -r mkdocs-ultimate \\\n    -d \"The ultimate plugin for MkDocs (??)\" \\\n    -p ~/data/dev/mkdocs-ultimate \\\n    -P ~/data/dev/insiders/mkdocs-ultimate \\\n    -t gh:pawamoy/copier-pdm\n</code></pre> <p>Example 2 - Project in another namespace:</p> <p>The insiders namespace, insiders repository name and username are different, so must be provided explicitly:</p> <pre><code>insiders create \\\n    -n mkdocstrings \\\n    -r rust \\\n    -d \"A Rust handler for mkdocstrings\" \\\n    -p ~/data/dev/mkdocstrings-rust \\\n    -P ~/data/dev/insiders/mkdocstrings-rust \\\n    -N pawamoy-insiders \\\n    -R mkdocstrings-rust \\\n    -u pawamoy \\\n    -t gh:mkdocstrings/handler-template\n</code></pre> <p>Options</p> <ul> <li><code>-h</code>, <code>--help</code>: Print the program help and exit. Default: <code>False</code>.</li> <li><code>-n</code>, <code>--namespace</code> <code>NAMESPACE</code>: Namespace of the public repository.</li> <li><code>-r</code>, <code>--repo</code> <code>REPO</code>: Name of the public repository.</li> <li><code>-d</code>, <code>--description</code> <code>DESCRIPTION</code>: Shared description.</li> <li><code>-p</code>, <code>--repo-path</code> <code>REPO_PATH</code>: Local path in which to clone the public repository.</li> <li><code>-P</code>, <code>--insiders-repo-path</code> <code>INSIDERS_REPO_PATH</code>: Local path in which to clone the insiders repository.</li> <li><code>-N</code>, <code>--insiders-namespace</code> <code>INSIDERS_NAMESPACE</code>: Namespace of the insiders repository. Defaults to the public namespace. Default: <code>None</code>.</li> <li><code>-R</code>, <code>--insiders-repo</code> <code>INSIDERS_REPO</code>: Name of the insiders repository. Defaults to the public name. Default: <code>None</code>.</li> <li><code>-u</code>, <code>--username</code> <code>USERNAME</code>: Username. Defaults to the public namespace value. Default: <code>None</code>.</li> <li><code>-t</code>, <code>--copier-template</code> <code>COPIER_TEMPLATE</code>: Copier template to initialize the local insiders repository with. Default: <code>None</code>.</li> <li><code>-i</code>, <code>--register-pypi</code>: Whether to register the project name on PyPI as version 0.0.0. Default: <code>False</code>.</li> </ul>"},{"location":"#pypi","title":"<code>pypi</code>","text":"<p>Manage PyPI-related things.</p> <p>Options</p> <ul> <li><code>-h</code>, <code>--help</code>: Print the program help and exit. Default: <code>False</code>.</li> </ul> <p>Subcommands</p>"},{"location":"#register","title":"<code>register</code>","text":"<p>Register a name on PyPI.</p> <p>This will create a temporary project on your filesystem, then build both source and wheel distributions for it, and upload them to PyPI using Twine.</p> <p>After that, you will see an initial version 0.0.0 of your project on PyPI.</p> <p>Example</p> <pre><code>insiders pypi register -u pawamoy -n my-new-project -d \"My new project!\"\n</code></pre> <p>Credentials must be configured in <code>~/.pypirc</code> to allow Twine to push to PyPI. For example, if you use PyPI API tokens, add the token to your keyring:</p> <pre><code>pipx install keyring\nkeyring set https://upload.pypi.org/legacy/ __token__\n# __token__ is a literal string, do not replace it with your token.\n# The command will prompt you to paste your token.\n</code></pre> <p>And configure <code>~/.pypirc</code>:</p> <pre><code>[distutils]\nindex-servers =\n    pypi\n\n[pypi]\nusername: __token__\n</code></pre> <p>Options</p> <ul> <li><code>-h</code>, <code>--help</code>: Print the program help and exit. Default: <code>False</code>.</li> <li><code>-u</code>, <code>--username</code> <code>USERNAME</code>: Username on PyPI (your account).</li> <li><code>-n</code>, <code>--name</code> <code>NAME</code>: Name to register.</li> <li><code>-d</code>, <code>--description</code> <code>DESCRIPTION</code>: Description of the project on PyPI.</li> </ul>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#100-2024-10-12","title":"1.0.0 - 2024-10-12","text":"<p>Compare with first commit</p>"},{"location":"changelog/#features","title":"Features","text":"<ul> <li>Make the project public! (f6b3e08 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"code_of_conduct/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"code_of_conduct/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"code_of_conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes,   and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the overall   community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or advances of   any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email address,   without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"code_of_conduct/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"code_of_conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"code_of_conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at dev@pawamoy.fr. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"code_of_conduct/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"code_of_conduct/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"code_of_conduct/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"code_of_conduct/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"code_of_conduct/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"code_of_conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.1, available at https://www.contributor-covenant.org/version/2/1/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.</p>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p>"},{"location":"contributing/#environment-setup","title":"Environment setup","text":"<p>Nothing easier!</p> <p>Fork and clone the repository, then:</p> <pre><code>cd insiders\nmake setup\n</code></pre> <p>Note</p> <p> If it fails for some reason, you'll need to install uv manually.</p> <p>You can install it with:</p> <pre><code>curl -LsSf https://astral.sh/uv/install.sh | sh\n</code></pre> <p>Now you can try running <code>make setup</code> again, or simply <code>uv sync</code>.</p> <p>You now have the dependencies installed.</p> <p>You can run the application with <code>make run insiders [ARGS...]</code>.</p> <p>Run <code>make help</code> to see all the available actions!</p>"},{"location":"contributing/#tasks","title":"Tasks","text":"<p>The entry-point to run commands and tasks is the <code>make</code> Python script, located in the <code>scripts</code> directory. Try running <code>make</code> to show the available commands and tasks. The commands do not need the Python dependencies to be installed, while the tasks do. The cross-platform tasks are written in Python, thanks to duty.</p> <p>If you work in VSCode, we provide an action to configure VSCode for the project.</p>"},{"location":"contributing/#development","title":"Development","text":"<p>As usual:</p> <ol> <li>create a new branch: <code>git switch -c feature-or-bugfix-name</code></li> <li>edit the code and/or the documentation</li> </ol> <p>Before committing:</p> <ol> <li>run <code>make format</code> to auto-format the code</li> <li>run <code>make check</code> to check everything (fix any warning)</li> <li>run <code>make test</code> to run the tests (fix any issue)</li> <li>if you updated the documentation or the project dependencies:<ol> <li>run <code>make docs</code></li> <li>go to http://localhost:8000 and check that everything looks good</li> </ol> </li> <li>follow our commit message convention</li> </ol> <p>If you are unsure about how to fix or ignore a warning, just let the continuous integration fail, and we will help you during review.</p> <p>Don't bother updating the changelog, we will take care of this.</p>"},{"location":"contributing/#commit-message-convention","title":"Commit message convention","text":"<p>Commit messages must follow our convention based on the Angular style or the Karma convention:</p> <pre><code>&lt;type&gt;[(scope)]: Subject\n\n[Body]\n</code></pre> <p>Subject and body must be valid Markdown. Subject must have proper casing (uppercase for first letter if it makes sense), but no dot at the end, and no punctuation in general.</p> <p>Scope and body are optional. Type can be:</p> <ul> <li><code>build</code>: About packaging, building wheels, etc.</li> <li><code>chore</code>: About packaging or repo/files management.</li> <li><code>ci</code>: About Continuous Integration.</li> <li><code>deps</code>: Dependencies update.</li> <li><code>docs</code>: About documentation.</li> <li><code>feat</code>: New feature.</li> <li><code>fix</code>: Bug fix.</li> <li><code>perf</code>: About performance.</li> <li><code>refactor</code>: Changes that are not features or bug fixes.</li> <li><code>style</code>: A change in code style/format.</li> <li><code>tests</code>: About tests.</li> </ul> <p>If you write a body, please add trailers at the end (for example issues and PR references, or co-authors), without relying on GitHub's flavored Markdown:</p> <pre><code>Body.\n\nIssue #10: https://github.com/namespace/project/issues/10\nRelated to PR namespace/other-project#15: https://github.com/namespace/other-project/pull/15\n</code></pre> <p>These \"trailers\" must appear at the end of the body, without any blank lines between them. The trailer title can contain any character except colons <code>:</code>. We expect a full URI for each trailer, not just GitHub autolinks (for example, full GitHub URLs for commits and issues, not the hash or the #issue-number).</p> <p>We do not enforce a line length on commit messages summary and body, but please avoid very long summaries, and very long lines in the body, unless they are part of code blocks that must not be wrapped.</p>"},{"location":"contributing/#pull-requests-guidelines","title":"Pull requests guidelines","text":"<p>Link to any related issue in the Pull Request message.</p> <p>During the review, we recommend using fixups:</p> <pre><code># SHA is the SHA of the commit you want to fix\ngit commit --fixup=SHA\n</code></pre> <p>Once all the changes are approved, you can squash your commits:</p> <pre><code>git rebase -i --autosquash main\n</code></pre> <p>And force-push:</p> <pre><code>git push -f\n</code></pre> <p>If this seems all too complicated, you can push or force-push each new commit, and we will squash them ourselves if needed, before merging.</p>"},{"location":"credits/","title":"Credits","text":""},{"location":"credits/#exec-2--credits","title":"Credits","text":"<p>These projects were used to build insiders. Thank you!</p> <p>Python | uv | copier-uv</p>"},{"location":"credits/#exec-2--runtime-dependencies","title":"Runtime dependencies","text":"Project Summary Version (accepted) Version (last resolved) License annotated-types Reusable constraint types to use with typing.Annotated <code>&gt;=0.6.0</code> <code>0.7.0</code> MIT License ansimarkup Produce colored terminal text with an xml-like markup <code>~=1.4</code> <code>1.5.0</code> Revised BSD License anyio High level compatibility layer for multiple asynchronous event loop implementations <code>4.6.0</code> MIT build A simple, correct Python build frontend <code>&gt;=1.2, &gt;=1.0</code> <code>1.2.2.post1</code> MIT License cappa Declarative CLI argument parser. <code>&gt;=0.8</code> <code>0.23.0</code> ? certifi Python package for providing Mozilla's CA Bundle. <code>&gt;=2017.4.17</code> <code>2024.8.30</code> MPL-2.0 cffi Foreign Function Interface for Python calling C code. <code>&gt;=1.12</code> <code>1.17.1</code> MIT charset-normalizer The Real First Universal Charset Detector. Open, modern and actively maintained alternative to Chardet. <code>&gt;=2, &lt;4</code> <code>3.4.0</code> MIT colorama Cross-platform colored terminal text. <code>&gt;=0.4.6</code> <code>0.4.6</code> BSD License copier A library for rendering project templates. <code>&gt;=8.3</code> <code>9.3.1</code> MIT copier-templates-extensions Special Jinja2 extension for Copier that allows to load extensions using file paths relative to the template root instead of Python dotted paths. <code>&gt;=0.3</code> <code>0.3.0</code> ISC cryptography cryptography is a package which provides cryptographic recipes and primitives to Python developers. <code>&gt;=2.0</code> <code>43.0.1</code> Apache-2.0 OR BSD-3-Clause docutils Docutils -- Python Documentation Utilities <code>&gt;=0.21.2</code> <code>0.21.2</code> Public Domain + Python Software Foundation License + BSD License + GNU General Public License (GPL) dunamai Dynamic version generation <code>&gt;=1.7.0</code> <code>1.22.0</code> MIT failprint Run a command, print its output only if it fails. <code>&gt;=1.0, &gt;=0.11, !=1.0.0</code> <code>1.0.2</code> ISC funcy A fancy and practical functional tools <code>&gt;=1.17</code> <code>2.0</code> BSD h11 A pure-Python, bring-your-own-I/O implementation of HTTP/1.1 <code>&gt;=0.13, &lt;0.15</code> <code>0.14.0</code> MIT httpcore A minimal low-level HTTP client. <code>==1.*</code> <code>1.0.6</code> BSD-3-Clause httpx The next generation HTTP client. <code>&gt;=0.27.0, &lt;1</code> <code>0.27.2</code> BSD-3-Clause idna Internationalized Domain Names in Applications (IDNA) <code>&gt;=2.5, &lt;4</code> <code>3.10</code> BSD License importlib_metadata Read metadata from Python packages <code>&gt;=4.6, &gt;=1.6.0</code> <code>8.5.0</code> Apache Software License jaraco.classes Utility functions for Python class constructs <code>3.4.0</code> MIT License jaraco.context Useful decorators and context managers <code>6.0.1</code> MIT License jaraco.functools Functools like those found in stdlib <code>4.1.0</code> MIT License jeepney Low-level, pure Python DBus protocol wrapper. <code>&gt;=0.4.2</code> <code>0.8.0</code> MIT License Jinja2 A very fast and expressive template engine. <code>&gt;=3.1.4, &gt;=2.10</code> <code>3.1.4</code> BSD License jinja2-ansible-filters A port of Ansible's jinja2 filters without requiring ansible core. <code>&gt;=1.3.1</code> <code>1.3.2</code> GPL3 keyring Store and access your passwords safely. <code>&gt;=15.1</code> <code>25.4.1</code> MIT License loguru Python logging made (stupidly) simple <code>&gt;=0.7</code> <code>0.7.2</code> MIT license markdown-it-py Python port of markdown-it. Markdown parsing, done right! <code>&gt;=2.2.0</code> <code>3.0.0</code> MIT License MarkupSafe Safely add untrusted strings to HTML/XML markup. <code>&gt;=2.0</code> <code>3.0.1</code> BSD License mdurl Markdown URL utilities <code>~=0.1</code> <code>0.1.2</code> MIT License more-itertools More routines for operating on iterables, beyond itertools <code>10.5.0</code> MIT License nh3 Python bindings to the ammonia HTML sanitization library. <code>&gt;=0.2.14</code> <code>0.2.18</code> MIT packaging Core utilities for Python packages <code>&gt;=24.0, &gt;=23.1</code> <code>24.1</code> Apache Software License + BSD License pathspec Utility library for gitignore style pattern matching of file paths. <code>&gt;=0.9.0</code> <code>0.12.1</code> Mozilla Public License 2.0 (MPL 2.0) pip The PyPA recommended tool for installing Python packages. <code>&gt;=7</code> <code>24.2</code> MIT pkginfo Query metadata from sdists / bdists / installed packages. <code>&gt;=1.8.1</code> <code>1.10.0</code> MIT platformdirs A small Python package for determining appropriate platform-specific dirs, e.g. a <code>user data dir</code>. <code>&gt;=3.5, &gt;=2.2</code> <code>4.3.6</code> MIT plumbum Plumbum: shell combinators library <code>&gt;=1.6.9</code> <code>1.9.0</code> MIT License prompt-toolkit Library for building powerful interactive command lines in Python <code>&gt;=2.0, &lt;=3.0.36</code> <code>3.0.36</code> BSD License psutil Cross-platform lib for process and system monitoring in Python. <code>&gt;=5.9</code> <code>6.0.0</code> BSD-3-Clause ptyprocess Run a subprocess in a pseudo terminal <code>~=0.6</code> <code>0.7.0</code> ISC License (ISCL) pycparser C parser in Python <code>2.22</code> BSD-3-Clause pydantic Data validation using Python type hints <code>&gt;=2.4.2</code> <code>2.9.2</code> MIT pydantic_core Core functionality for Pydantic validation and serialization <code>==2.23.4</code> <code>2.23.4</code> MIT Pygments Pygments is a syntax highlighting package written in Python. <code>&gt;=2.7.1, &gt;=2.13.0, &lt;3.0.0</code> <code>2.18.0</code> BSD-2-Clause pypi-insiders Self-hosted PyPI server with automatic updates for Insiders versions of projects. <code>&gt;=0.0</code> <code>0.0.0.1.3.3</code> ISC pypiserver A minimal PyPI server for use with pip/easy_install. <code>&gt;=1.5</code> <code>2.2.0</code> BSD License + zlib/libpng License pyproject_hooks Wrappers to call pyproject.toml-based build backend hooks. <code>1.2.0</code> MIT License PyYAML YAML parser and emitter for Python <code>&gt;=5.3.1, &gt;=5.1</code> <code>6.0.2</code> MIT questionary Python library to build pretty command line user prompts \u2b50\ufe0f <code>&gt;=1.8.1</code> <code>2.0.1</code> MIT readme_renderer readme_renderer is a library for rendering readme descriptions for Warehouse <code>&gt;=35.0</code> <code>44.0</code> Apache License, Version 2.0 requests Python HTTP for Humans. <code>&gt;=2.20</code> <code>2.32.3</code> Apache-2.0 requests-toolbelt A utility belt for advanced users of python-requests <code>&gt;=0.8.0, !=0.9.0</code> <code>1.0.0</code> Apache 2.0 rfc3986 Validating URI References per RFC 3986 <code>&gt;=1.4.0</code> <code>2.0.0</code> Apache 2.0 rich Render rich text, tables, progress bars, syntax highlighting, markdown and more to the terminal <code>&gt;=12.0.0</code> <code>13.9.2</code> MIT SecretStorage Python bindings to FreeDesktop.org Secret Service API <code>&gt;=3.2</code> <code>3.3.3</code> BSD 3-Clause License sniffio Sniff out which async library your code is running under <code>1.3.1</code> MIT OR Apache-2.0 twine Collection of utilities for publishing packages on PyPI <code>&gt;=5.1, &gt;=4.0</code> <code>5.1.1</code> Apache Software License type-lens type-lens is a Python template project designed to simplify the setup of a new project. <code>&gt;=0.2.3</code> <code>0.2.3</code> MIT typing_extensions Backported and Experimental Type Hints for Python 3.8+ <code>&gt;=4.6.0, &gt;=3.7.4, &lt;5.0.0</code> <code>4.12.2</code> Python Software Foundation License unearth A utility to fetch and download python packages <code>&gt;=0.9</code> <code>0.17.2</code> MIT urllib3 HTTP library with thread-safe connection pooling, file post, and more. <code>&gt;=1.26.0</code> <code>2.2.3</code> MIT License wcwidth Measures the displayed width of unicode strings in a terminal <code>0.2.13</code> MIT zipp Backport of pathlib-compatible object wrapper for zip files <code>&gt;=3.20</code> <code>3.20.2</code> MIT License"},{"location":"credits/#exec-2--development-dependencies","title":"Development dependencies","text":"Project Summary Version (accepted) Version (last resolved) License ansimarkup Produce colored terminal text with an xml-like markup <code>~=1.4</code> <code>1.5.0</code> Revised BSD License appdirs A small Python module for determining appropriate platform-specific dirs, e.g. a \"user data dir\". <code>&gt;=1.4</code> <code>1.4.4</code> MIT babel Internationalization utilities <code>&gt;=2.7.0</code> <code>2.16.0</code> BSD-3-Clause black The uncompromising code formatter. <code>&gt;=24.4</code> <code>24.10.0</code> MIT build A simple, correct Python build frontend <code>&gt;=1.2, &gt;=1.0</code> <code>1.2.2.post1</code> MIT License certifi Python package for providing Mozilla's CA Bundle. <code>&gt;=2017.4.17</code> <code>2024.8.30</code> MPL-2.0 cffi Foreign Function Interface for Python calling C code. <code>&gt;=1.12</code> <code>1.17.1</code> MIT charset-normalizer The Real First Universal Charset Detector. Open, modern and actively maintained alternative to Chardet. <code>&gt;=2, &lt;4</code> <code>3.4.0</code> MIT click Composable command line interface toolkit <code>&gt;=7.0</code> <code>8.1.7</code> BSD-3-Clause colorama Cross-platform colored terminal text. <code>&gt;=0.4.6</code> <code>0.4.6</code> BSD License coverage Code coverage measurement for Python <code>&gt;=5.2.1</code> <code>7.6.2</code> Apache-2.0 cryptography cryptography is a package which provides cryptographic recipes and primitives to Python developers. <code>&gt;=2.0</code> <code>43.0.1</code> Apache-2.0 OR BSD-3-Clause csscompressor A python port of YUI CSS Compressor <code>&gt;=0.9.5</code> <code>0.9.5</code> BSD docutils Docutils -- Python Documentation Utilities <code>&gt;=0.21.2</code> <code>0.21.2</code> Public Domain + Python Software Foundation License + BSD License + GNU General Public License (GPL) duty A simple task runner. <code>&gt;=1.4</code> <code>1.4.2</code> ISC editables Editable installations <code>&gt;=0.5</code> <code>0.5</code> MIT License execnet execnet: rapid multi-Python deployment <code>&gt;=2.1</code> <code>2.1.1</code> MIT failprint Run a command, print its output only if it fails. <code>&gt;=1.0, &gt;=0.11, !=1.0.0</code> <code>1.0.2</code> ISC ghp-import Copy your docs directly to the gh-pages branch. <code>&gt;=1.0</code> <code>2.1.0</code> Apache Software License git-changelog Automatic Changelog generator using Jinja2 templates. <code>&gt;=2.5</code> <code>2.5.2</code> ISC gitdb Git Object Database <code>&gt;=4.0.1, &lt;5</code> <code>4.0.11</code> BSD License GitPython GitPython is a Python library used to interact with Git repositories <code>3.1.43</code> BSD-3-Clause griffe Signatures for entire Python programs. Extract the structure, the frame, the skeleton of your project, to generate API documentation or find breaking changes in your API. <code>&gt;=0.49</code> <code>1.4.1.1.2.0</code> ISC griffe-typingdoc Griffe extension for PEP 727 \u2013 Documentation Metadata in Typing. <code>&gt;=0.2</code> <code>0.2.7</code> ISC htmlmin2 An HTML Minifier <code>&gt;=0.1.13</code> <code>0.1.13</code> BSD idna Internationalized Domain Names in Applications (IDNA) <code>&gt;=2.5, &lt;4</code> <code>3.10</code> BSD License importlib_metadata Read metadata from Python packages <code>&gt;=4.6, &gt;=1.6.0</code> <code>8.5.0</code> Apache Software License iniconfig brain-dead simple config-ini parsing <code>2.0.0</code> MIT jaraco.classes Utility functions for Python class constructs <code>3.4.0</code> MIT License jaraco.context Useful decorators and context managers <code>6.0.1</code> MIT License jaraco.functools Functools like those found in stdlib <code>4.1.0</code> MIT License jeepney Low-level, pure Python DBus protocol wrapper. <code>&gt;=0.4.2</code> <code>0.8.0</code> MIT License Jinja2 A very fast and expressive template engine. <code>&gt;=3.1.4, &gt;=2.10</code> <code>3.1.4</code> BSD License jsmin JavaScript minifier. <code>&gt;=3.0.1</code> <code>3.0.1</code> MIT License keyring Store and access your passwords safely. <code>&gt;=15.1</code> <code>25.4.1</code> MIT License Markdown Python implementation of John Gruber's Markdown. <code>&gt;=3.6</code> <code>3.7</code> BSD License markdown-callouts Markdown extension: a classier syntax for admonitions <code>&gt;=0.4</code> <code>0.4.0</code> MIT markdown-exec Utilities to execute code blocks in Markdown files. <code>&gt;=1.8</code> <code>1.9.3.1.1.0</code> ISC markdown-it-py Python port of markdown-it. Markdown parsing, done right! <code>&gt;=2.2.0</code> <code>3.0.0</code> MIT License MarkupSafe Safely add untrusted strings to HTML/XML markup. <code>&gt;=2.0</code> <code>3.0.1</code> BSD License mdurl Markdown URL utilities <code>~=0.1</code> <code>0.1.2</code> MIT License mergedeep A deep merge function for \ud83d\udc0d. <code>~=1.3</code> <code>1.3.4</code> MIT License mkdocs Project documentation with Markdown. <code>&gt;=1.6</code> <code>1.6.1</code> BSD-2-Clause mkdocs-autorefs Automatically link across pages in MkDocs. <code>&gt;=1.2</code> <code>1.2.0</code> ISC mkdocs-coverage MkDocs plugin to integrate your coverage HTML report into your site. <code>&gt;=1.0</code> <code>1.1.0</code> ISC mkdocs-gen-files MkDocs plugin to programmatically generate documentation pages during the build <code>&gt;=0.5</code> <code>0.5.0</code> MIT mkdocs-get-deps MkDocs extension that lists all dependencies according to a mkdocs.yml file <code>&gt;=0.2.0</code> <code>0.2.0</code> MIT mkdocs-git-revision-date-localized-plugin Mkdocs plugin that enables displaying the localized date of the last git modification of a markdown file. <code>&gt;=1.2</code> <code>1.2.9</code> MIT mkdocs-literate-nav MkDocs plugin to specify the navigation in Markdown instead of YAML <code>&gt;=0.6</code> <code>0.6.1</code> MIT mkdocs-material Documentation that simply works <code>&gt;=9.5</code> <code>9.5.40+insiders.4.53.14</code> MIT mkdocs-material-extensions Extension pack for Python Markdown and MkDocs Material. <code>~=1.3</code> <code>1.3.1</code> MIT mkdocs-minify-plugin An MkDocs plugin to minify HTML, JS or CSS files prior to being written to disk <code>&gt;=0.8</code> <code>0.8.0</code> MIT mkdocstrings Automatic documentation from sources, for MkDocs. <code>&gt;=0.25</code> <code>0.26.1</code> ISC mkdocstrings-python A Python handler for mkdocstrings. <code>&gt;=0.5.2</code> <code>1.11.1.1.9.0</code> ISC more-itertools More routines for operating on iterables, beyond itertools <code>10.5.0</code> MIT License mypy Optional static typing for Python <code>&gt;=1.10</code> <code>1.11.2</code> MIT mypy-extensions Type system extensions for programs checked with the mypy type checker. <code>&gt;=1.0.0</code> <code>1.0.0</code> MIT License nh3 Python bindings to the ammonia HTML sanitization library. <code>&gt;=0.2.14</code> <code>0.2.18</code> MIT packaging Core utilities for Python packages <code>&gt;=24.0, &gt;=23.1</code> <code>24.1</code> Apache Software License + BSD License paginate Divides large result sets into pages for easier browsing <code>~=0.5</code> <code>0.5.7</code> MIT pathspec Utility library for gitignore style pattern matching of file paths. <code>&gt;=0.9.0</code> <code>0.12.1</code> Mozilla Public License 2.0 (MPL 2.0) pkginfo Query metadata from sdists / bdists / installed packages. <code>&gt;=1.8.1</code> <code>1.10.0</code> MIT platformdirs A small Python package for determining appropriate platform-specific dirs, e.g. a <code>user data dir</code>. <code>&gt;=3.5, &gt;=2.2</code> <code>4.3.6</code> MIT pluggy plugin and hook calling mechanisms for python <code>&gt;=1.5, &lt;2</code> <code>1.5.0</code> MIT ptyprocess Run a subprocess in a pseudo terminal <code>~=0.6</code> <code>0.7.0</code> ISC License (ISCL) pycparser C parser in Python <code>2.22</code> BSD-3-Clause Pygments Pygments is a syntax highlighting package written in Python. <code>&gt;=2.7.1, &gt;=2.13.0, &lt;3.0.0</code> <code>2.18.0</code> BSD-2-Clause pymdown-extensions Extension pack for Python Markdown. <code>&gt;=6.3</code> <code>10.11.2</code> MIT pyproject_hooks Wrappers to call pyproject.toml-based build backend hooks. <code>1.2.0</code> MIT License pytest pytest: simple powerful testing with Python <code>&gt;=8.2</code> <code>8.3.3</code> MIT pytest-cov Pytest plugin for measuring coverage. <code>&gt;=5.0</code> <code>5.0.0</code> MIT pytest-randomly Pytest plugin to randomly order tests and control random.seed. <code>&gt;=3.15</code> <code>3.15.0</code> MIT pytest-xdist pytest xdist plugin for distributed testing, most importantly across multiple CPUs <code>&gt;=3.6</code> <code>3.6.1</code> MIT License python-dateutil Extensions to the standard Python datetime module <code>&gt;=2.8.1</code> <code>2.9.0.post0</code> BSD License + Apache Software License pytz World timezone definitions, modern and historical <code>2024.2</code> MIT PyYAML YAML parser and emitter for Python <code>&gt;=5.3.1, &gt;=5.1</code> <code>6.0.2</code> MIT pyyaml_env_tag A custom YAML tag for referencing environment variables in YAML files. <code>&gt;=0.1</code> <code>0.1</code> MIT License readme_renderer readme_renderer is a library for rendering readme descriptions for Warehouse <code>&gt;=35.0</code> <code>44.0</code> Apache License, Version 2.0 regex Alternative regular expression module, to replace re. <code>&gt;=2022.4</code> <code>2024.9.11</code> Apache Software License requests Python HTTP for Humans. <code>&gt;=2.20</code> <code>2.32.3</code> Apache-2.0 requests-toolbelt A utility belt for advanced users of python-requests <code>&gt;=0.8.0, !=0.9.0</code> <code>1.0.0</code> Apache 2.0 rfc3986 Validating URI References per RFC 3986 <code>&gt;=1.4.0</code> <code>2.0.0</code> Apache 2.0 rich Render rich text, tables, progress bars, syntax highlighting, markdown and more to the terminal <code>&gt;=12.0.0</code> <code>13.9.2</code> MIT ruff An extremely fast Python linter and code formatter, written in Rust. <code>&gt;=0.4</code> <code>0.6.9</code> MIT SecretStorage Python bindings to FreeDesktop.org Secret Service API <code>&gt;=3.2</code> <code>3.3.3</code> BSD 3-Clause License semver Python helper for Semantic Versioning (https://semver.org) <code>&gt;=2.13</code> <code>3.0.2</code> BSD six Python 2 and 3 compatibility utilities <code>&gt;=1.5</code> <code>1.16.0</code> MIT smmap A pure Python implementation of a sliding window memory map manager <code>&gt;=3.0.1, &lt;6</code> <code>5.0.1</code> BSD twine Collection of utilities for publishing packages on PyPI <code>&gt;=5.1, &gt;=4.0</code> <code>5.1.1</code> Apache Software License types-Markdown Typing stubs for Markdown <code>&gt;=3.6</code> <code>3.7.0.20240822</code> Apache-2.0 types-PyYAML Typing stubs for PyYAML <code>&gt;=6.0</code> <code>6.0.12.20240917</code> Apache-2.0 typing_extensions Backported and Experimental Type Hints for Python 3.8+ <code>&gt;=4.6.0, &gt;=3.7.4, &lt;5.0.0</code> <code>4.12.2</code> Python Software Foundation License urllib3 HTTP library with thread-safe connection pooling, file post, and more. <code>&gt;=1.26.0</code> <code>2.2.3</code> MIT License watchdog Filesystem events monitoring <code>&gt;=2.0</code> <code>5.0.3</code> Apache-2.0 zipp Backport of pathlib-compatible object wrapper for zip files <code>&gt;=3.20</code> <code>3.20.2</code> MIT License <p>More credits from the author</p>"},{"location":"license/","title":"License","text":"<pre><code>ISC License\n\nCopyright (c) 2023, Timoth\u00e9e Mazzucotelli\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\nOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n</code></pre>"},{"location":"insiders/","title":"Insiders","text":"<p>insiders follows the sponsorware release strategy, which means that new features are first exclusively released to sponsors as part of Insiders. Read on to learn what sponsorships achieve, how to become a sponsor to get access to Insiders, and what's in it for you!</p>"},{"location":"insiders/#what-is-insiders","title":"What is Insiders?","text":"<p>insiders Insiders is a private fork of insiders, hosted as a private GitHub repository. Almost<sup>1</sup> all new features are developed as part of this fork, which means that they are immediately available to all eligible sponsors, as they are made collaborators of this repository.</p> <p>Every feature is tied to a funding goal in monthly subscriptions. When a funding goal is hit, the features that are tied to it are merged back into insiders and released for general availability, making them available to all users. Bugfixes are always released in tandem.</p> <p>Sponsorships start as low as $10 a month.<sup>2</sup></p>"},{"location":"insiders/#what-sponsorships-achieve","title":"What sponsorships achieve","text":"<p>Sponsorships make this project sustainable, as they buy the maintainers of this project time \u2013 a very scarce resource \u2013 which is spent on the development of new features, bug fixing, stability improvement, issue triage and general support. The biggest bottleneck in Open Source is time.<sup>3</sup></p> <p>If you're unsure if you should sponsor this project, check out the list of completed funding goals to learn whether you're already using features that were developed with the help of sponsorships. You're most likely using at least a handful of them, thanks to our awesome sponsors!</p>"},{"location":"insiders/#whats-in-it-for-me","title":"What's in it for me?","text":"<p>The moment you become a sponsor, you'll get immediate access to all released features that you can start using right away, and which are exclusively available to sponsors. At this moment, there are no Insiders features for this project, but checkout the next funding goals to see what's coming, as well as the feature list for all Insiders projects.</p>"},{"location":"insiders/#how-to-become-a-sponsor","title":"How to become a sponsor","text":"<p>Thanks for your interest in sponsoring! In order to become an eligible sponsor with your GitHub account, visit pawamoy's sponsor profile, and complete a sponsorship of $10 a month or more. You can use your individual or organization GitHub account for sponsoring.</p> <p>Sponsorships lower than $10 a month are also very much appreciated, and useful. They won't grant you access to Insiders, but they will be counted towards reaching sponsorship goals. Every sponsorship helps us implementing new features and releasing them to the public.</p> <p>Important: If you're sponsoring @pawamoy through a GitHub organization, please send a short email to insiders@pawamoy.fr with the name of your organization and the GitHub account of the individual that should be added as a collaborator.<sup>4</sup></p> <p>You can cancel your sponsorship anytime.<sup>5</sup></p> <p> \u00a0 Join our  awesome sponsors</p> <p>   If you sponsor publicly, you're automatically added here with a link to   your profile and avatar to show your support for insiders.   Alternatively, if you wish to keep your sponsorship private, you'll be a   silent +1. You can select visibility during checkout and change it   afterwards. </p>"},{"location":"insiders/#funding","title":"Funding","text":""},{"location":"insiders/#goals","title":"Goals","text":"<p>The following section lists all funding goals. Each goal contains a list of features prefixed with a checkmark symbol, denoting whether a feature is  already available or   planned, but not yet implemented. When the funding goal is hit, the features are released for general availability.</p> <p></p>"},{"location":"insiders/#1500-hyperlamp-navigation-tips","title":"$ 1,500 \u2014 HyperLamp Navigation Tips","text":"<p>There are no features in this goal for this project. See the features in this goal for all Insiders projects.</p>"},{"location":"insiders/#2000-fusiondrive-ejection-configuration","title":"$ 2,000 \u2014 FusionDrive Ejection Configuration","text":"<p>There are no features in this goal for this project. See the features in this goal for all Insiders projects.</p>"},{"location":"insiders/#goals-completed","title":"Goals completed","text":"<p>This section lists all funding goals that were previously completed, which means that those features were part of Insiders, but are now generally available and can be used by all users.</p> <p></p>"},{"location":"insiders/#500-plasmavac-user-guide","title":"$ 500 \u2014 PlasmaVac User Guide","text":"<p>There are no features in this goal for this project. See the features in this goal for all Insiders projects.</p>"},{"location":"insiders/#1000-gravifridge-fluid-renewal","title":"$ 1,000 \u2014 GraviFridge Fluid Renewal","text":"<ul> <li> [Project] Manage your Insiders projects</li> </ul>"},{"location":"insiders/#frequently-asked-questions","title":"Frequently asked questions","text":""},{"location":"insiders/#compatibility","title":"Compatibility","text":"<p>We're building an open source project and want to allow outside collaborators to use insiders locally without having access to Insiders. Is this still possible?</p> <p>Yes. Insiders is compatible with insiders. Almost all new features and configuration options are either backward-compatible or implemented behind feature flags. Most Insiders features enhance the overall experience, though while these features add value for the users of your project, they shouldn't be necessary for previewing when making changes to content.</p>"},{"location":"insiders/#payment","title":"Payment","text":"<p>We don't want to pay for sponsorship every month. Are there any other options?</p> <p>Yes. You can sponsor on a yearly basis by switching your GitHub account to a yearly billing cycle. If for some reason you cannot do that, you could also create a dedicated GitHub account with a yearly billing cycle, which you only use for sponsoring (some sponsors already do that).</p> <p>If you have any problems or further questions, please reach out to insiders@pawamoy.fr.</p>"},{"location":"insiders/#terms","title":"Terms","text":"<p>Are we allowed to use Insiders under the same terms and conditions as insiders?</p> <p>Yes. Whether you're an individual or a company, you may use insiders Insiders precisely under the same terms as insiders, which are given by the ISC License. However, we kindly ask you to respect our fair use policy:</p> <ul> <li> <p>Please don't distribute the source code of Insiders. You may freely use   it for public, private or commercial projects, privately fork or mirror it,   but please don't make the source code public, as it would counteract the    sponsorware strategy.</p> </li> <li> <p>If you cancel your subscription, you're automatically removed as a   collaborator and will miss out on all future updates of Insiders. However, you   may use the latest version that's available to you as long as you like.   Just remember that GitHub deletes private forks.</p> </li> </ul> <ol> <li> <p>In general, every new feature is first exclusively released to sponsors, but sometimes upstream dependencies enhance existing features that must be supported by insiders.\u00a0\u21a9</p> </li> <li> <p>Note that $10 a month is the minimum amount to become eligible for Insiders. While GitHub Sponsors also allows to sponsor lower amounts or one-time amounts, those can't be granted access to Insiders due to technical reasons. Such contributions are still very much welcome as they help ensuring the project's sustainability.\u00a0\u21a9</p> </li> <li> <p>Making an Open Source project sustainable is exceptionally hard: maintainers burn out, projects are abandoned. That's not great and very unpredictable. The sponsorware model ensures that if you decide to use insiders, you can be sure that bugs are fixed quickly and new features are added regularly.\u00a0\u21a9</p> </li> <li> <p>It's currently not possible to grant access to each member of an organization, as GitHub only allows for adding users. Thus, after sponsoring, please send an email to insiders@pawamoy.fr, stating which account should become a collaborator of the Insiders repository. We're working on a solution which will make access to organizations much simpler. To ensure that access is not tied to a particular individual GitHub account, create a bot account (i.e. a GitHub account that is not tied to a specific individual), and use this account for the sponsoring. After being added to the list of collaborators, the bot account can create a private fork of the private Insiders GitHub repository, and grant access to all members of the organizations.\u00a0\u21a9</p> </li> <li> <p>If you cancel your sponsorship, GitHub schedules a cancellation request which will become effective at the end of the billing cycle. This means that even though you cancel your sponsorship, you will keep your access to Insiders as long as your cancellation isn't effective. All charges are processed by GitHub through Stripe. As we don't receive any information regarding your payment, and GitHub doesn't offer refunds, sponsorships are non-refundable.\u00a0\u21a9</p> </li> </ol>"},{"location":"insiders/changelog/","title":"Changelog","text":""},{"location":"insiders/changelog/#insiders-insiders","title":"insiders Insiders","text":""},{"location":"insiders/changelog/#1.0.2","title":"1.0.2 May 25, 2024","text":"<ul> <li>Output complete skeleton for public project, not just README and workflow</li> <li>Use copier-uv template for my own projects</li> </ul>"},{"location":"insiders/changelog/#1.0.1","title":"1.0.1 November 23, 2023","text":"<ul> <li>Fix bug in commands (pop <code>help</code> flag)</li> </ul>"},{"location":"insiders/changelog/#1.0.0","title":"1.0.0 October 29, 2023","text":"<ul> <li>Release first Insiders version</li> </ul>"},{"location":"insiders/installation/","title":"Getting started with Insiders","text":"<p>insiders Insiders is a compatible drop-in replacement for insiders, and can be installed similarly using <code>pip</code> or <code>git</code>. Note that in order to access the Insiders  repository, you need to become an eligible sponsor of @pawamoy on GitHub.</p>"},{"location":"insiders/installation/#installation","title":"Installation","text":""},{"location":"insiders/installation/#with-pypi-insiders","title":"with PyPI Insiders","text":"<p>PyPI Insiders is a tool that helps you keep up-to-date versions of Insiders projects in the PyPI index of your choice (self-hosted, Google registry, Artifactory, etc.).</p> <p>See how to install it and how to use it.</p> <p>We kindly ask that you do not upload the distributions to public registries, as it is against our Terms of use.</p>"},{"location":"insiders/installation/#with-pip-sshhttps","title":"with pip (ssh/https)","text":"<p>insiders Insiders can be installed with <code>pip</code> using SSH:</p> <pre><code>pip install git+ssh://git@github.com/pawamoy-insiders/insiders.git\n</code></pre> <p>Or using HTTPS:</p> <pre><code>pip install git+https://${GH_TOKEN}@github.com/pawamoy-insiders/insiders.git\n</code></pre> How to get a GitHub personal access token <p>The <code>GH_TOKEN</code> environment variable is a GitHub token. It can be obtained by creating a personal access token for your GitHub account. It will give you access to the Insiders repository, programmatically, from the command line or GitHub Actions workflows:</p> <ol> <li>Go to https://github.com/settings/tokens</li> <li>Click on Generate a new token</li> <li>Enter a name and select the <code>repo</code> scope</li> <li>Generate the token and store it in a safe place</li> </ol> <p>Note that the personal access token must be kept secret at all times, as it allows the owner to access your private repositories.</p>"},{"location":"insiders/installation/#with-git","title":"with Git","text":"<p>Of course, you can use insiders Insiders directly using Git:</p> <pre><code>git clone git@github.com:pawamoy-insiders/insiders\n</code></pre> <p>When cloning with Git, the package must be installed:</p> <pre><code>pip install -e insiders\n</code></pre>"},{"location":"insiders/installation/#upgrading","title":"Upgrading","text":"<p>When upgrading Insiders, you should always check the version of insiders which makes up the first part of the version qualifier. For example, a version like <code>8.x.x.4.x.x</code> means that Insiders <code>4.x.x</code> is currently based on <code>8.x.x</code>.</p> <p>If the major version increased, it's a good idea to consult the changelog and go through the steps to ensure your configuration is up to date and all necessary changes have been made.</p>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li> insiders<ul> <li> cli</li> <li> debug</li> <li> github</li> <li> pypi</li> </ul> </li> </ul>"},{"location":"reference/insiders/","title":"insiders","text":""},{"location":"reference/insiders/#insiders","title":"insiders","text":"<p>insiders package.</p> <p>Manage your Insiders projects.</p> <p>Modules:</p> <ul> <li> <code>cli</code>           \u2013            <p>Module that contains the command line application.</p> </li> <li> <code>debug</code>           \u2013            <p>Debugging utilities.</p> </li> <li> <code>github</code>           \u2013            <p>GitHub integration.</p> </li> <li> <code>pypi</code>           \u2013            <p>PyPI integration.</p> </li> </ul>"},{"location":"reference/insiders/cli/","title":"insiders.cli","text":""},{"location":"reference/insiders/cli/#insiders.cli","title":"cli","text":"<p>Module that contains the command line application.</p> <p>Modules:</p> <ul> <li> <code>debug</code>           \u2013            <p>Debugging utilities.</p> </li> </ul> <p>Classes:</p> <ul> <li> <code>CommandCreate</code>           \u2013            <p>Command to create public/insiders repositories.</p> </li> <li> <code>CommandMain</code>           \u2013            <p>Command to manage your Insiders projects.</p> </li> <li> <code>CommandPyPI</code>           \u2013            <p>Command to manage PyPI-related things.</p> </li> <li> <code>CommandPyPIRegister</code>           \u2013            <p>Command to register a project name on PyPI.</p> </li> <li> <code>HelpOption</code>           \u2013            <p>Reusable class to share a <code>-h</code>, <code>--help</code> option.</p> </li> </ul> <p>Functions:</p> <ul> <li> <code>main</code>             \u2013              <p>Run the main program.</p> </li> <li> <code>print_and_exit</code>             \u2013              <p>Argument action callable to print something and exit immediately.</p> </li> </ul>"},{"location":"reference/insiders/cli/#insiders.cli.CommandCreate","title":"CommandCreate  <code>dataclass</code>","text":"<pre><code>CommandCreate(\n    *,\n    help: bool = False,\n    namespace: str,\n    repo: str,\n    description: str,\n    repo_path: Path,\n    insiders_repo_path: Path,\n    insiders_namespace: str | None = None,\n    insiders_repo: str | None = None,\n    username: str | None = None,\n    copier_template: str | None = None,\n    register_pypi: bool = False\n)\n</code></pre> <p>               Bases: <code>HelpOption</code></p> <p>Command to create public/insiders repositories.</p> <p>Attributes:</p> <ul> <li> <code>copier_template</code>               (<code>str | None</code>)           \u2013            <p>Copier template to initialize the local insiders repository with.</p> </li> <li> <code>description</code>               (<code>str</code>)           \u2013            <p>Shared description.</p> </li> <li> <code>help</code>               (<code>bool</code>)           \u2013            <p>Print the program help and exit.</p> </li> <li> <code>insiders_namespace</code>               (<code>str | None</code>)           \u2013            <p>Namespace of the insiders repository. Defaults to the public namespace.</p> </li> <li> <code>insiders_repo</code>               (<code>str | None</code>)           \u2013            <p>Name of the insiders repository. Defaults to the public name.</p> </li> <li> <code>insiders_repo_path</code>               (<code>Path</code>)           \u2013            <p>Local path in which to clone the insiders repository.</p> </li> <li> <code>namespace</code>               (<code>str</code>)           \u2013            <p>Namespace of the public repository.</p> </li> <li> <code>register_pypi</code>               (<code>bool</code>)           \u2013            <p>Whether to register the project name on PyPI as version 0.0.0.</p> </li> <li> <code>repo</code>               (<code>str</code>)           \u2013            <p>Name of the public repository.</p> </li> <li> <code>repo_path</code>               (<code>Path</code>)           \u2013            <p>Local path in which to clone the public repository.</p> </li> <li> <code>username</code>               (<code>str | None</code>)           \u2013            <p>Username. Defaults to the public namespace value.</p> </li> </ul>"},{"location":"reference/insiders/cli/#insiders.cli.CommandCreate.copier_template","title":"copier_template  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>copier_template: str | None = None\n</code></pre> <p>Copier template to initialize the local insiders repository with.</p>"},{"location":"reference/insiders/cli/#insiders.cli.CommandCreate.description","title":"description  <code>instance-attribute</code>","text":"<pre><code>description: str\n</code></pre> <p>Shared description.</p>"},{"location":"reference/insiders/cli/#insiders.cli.CommandCreate.help","title":"help  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>help: bool = False\n</code></pre> <p>Print the program help and exit.</p>"},{"location":"reference/insiders/cli/#insiders.cli.CommandCreate.insiders_namespace","title":"insiders_namespace  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>insiders_namespace: str | None = None\n</code></pre> <p>Namespace of the insiders repository. Defaults to the public namespace.</p>"},{"location":"reference/insiders/cli/#insiders.cli.CommandCreate.insiders_repo","title":"insiders_repo  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>insiders_repo: str | None = None\n</code></pre> <p>Name of the insiders repository. Defaults to the public name.</p>"},{"location":"reference/insiders/cli/#insiders.cli.CommandCreate.insiders_repo_path","title":"insiders_repo_path  <code>instance-attribute</code>","text":"<pre><code>insiders_repo_path: Path\n</code></pre> <p>Local path in which to clone the insiders repository.</p>"},{"location":"reference/insiders/cli/#insiders.cli.CommandCreate.namespace","title":"namespace  <code>instance-attribute</code>","text":"<pre><code>namespace: str\n</code></pre> <p>Namespace of the public repository.</p>"},{"location":"reference/insiders/cli/#insiders.cli.CommandCreate.register_pypi","title":"register_pypi  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>register_pypi: bool = False\n</code></pre> <p>Whether to register the project name on PyPI as version 0.0.0.</p>"},{"location":"reference/insiders/cli/#insiders.cli.CommandCreate.repo","title":"repo  <code>instance-attribute</code>","text":"<pre><code>repo: str\n</code></pre> <p>Name of the public repository.</p>"},{"location":"reference/insiders/cli/#insiders.cli.CommandCreate.repo_path","title":"repo_path  <code>instance-attribute</code>","text":"<pre><code>repo_path: Path\n</code></pre> <p>Local path in which to clone the public repository.</p>"},{"location":"reference/insiders/cli/#insiders.cli.CommandCreate.username","title":"username  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>username: str | None = None\n</code></pre> <p>Username. Defaults to the public namespace value.</p>"},{"location":"reference/insiders/cli/#insiders.cli.CommandMain","title":"CommandMain  <code>dataclass</code>","text":"<pre><code>CommandMain(\n    *,\n    help: bool = False,\n    subcommand: Subcommands[CommandCreate | CommandPyPI],\n    version: bool = False,\n    debug_info: bool = False,\n    completion: bool = False\n)\n</code></pre> <p>               Bases: <code>HelpOption</code></p> <p>Command to manage your Insiders projects.</p> <p>Attributes:</p> <ul> <li> <code>debug_info</code>               (<code>bool</code>)           \u2013            <p>Print debug information.</p> </li> <li> <code>help</code>               (<code>bool</code>)           \u2013            <p>Print the program help and exit.</p> </li> <li> <code>subcommand</code>               (<code>Subcommands[CommandCreate | CommandPyPI]</code>)           \u2013            <p>The selected subcommand.</p> </li> </ul>"},{"location":"reference/insiders/cli/#insiders.cli.CommandMain.debug_info","title":"debug_info  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>debug_info: bool = False\n</code></pre> <p>Print debug information.</p>"},{"location":"reference/insiders/cli/#insiders.cli.CommandMain.help","title":"help  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>help: bool = False\n</code></pre> <p>Print the program help and exit.</p>"},{"location":"reference/insiders/cli/#insiders.cli.CommandMain.subcommand","title":"subcommand  <code>instance-attribute</code>","text":"<pre><code>subcommand: Subcommands[CommandCreate | CommandPyPI]\n</code></pre> <p>The selected subcommand.</p>"},{"location":"reference/insiders/cli/#insiders.cli.CommandPyPI","title":"CommandPyPI  <code>dataclass</code>","text":"<pre><code>CommandPyPI(\n    *,\n    help: bool = False,\n    subcommand: Subcommands[CommandPyPIRegister]\n)\n</code></pre> <p>               Bases: <code>HelpOption</code></p> <p>Command to manage PyPI-related things.</p> <p>Attributes:</p> <ul> <li> <code>help</code>               (<code>bool</code>)           \u2013            <p>Print the program help and exit.</p> </li> <li> <code>subcommand</code>               (<code>Subcommands[CommandPyPIRegister]</code>)           \u2013            <p>The selected subcommand.</p> </li> </ul>"},{"location":"reference/insiders/cli/#insiders.cli.CommandPyPI.help","title":"help  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>help: bool = False\n</code></pre> <p>Print the program help and exit.</p>"},{"location":"reference/insiders/cli/#insiders.cli.CommandPyPI.subcommand","title":"subcommand  <code>instance-attribute</code>","text":"<pre><code>subcommand: Subcommands[CommandPyPIRegister]\n</code></pre> <p>The selected subcommand.</p>"},{"location":"reference/insiders/cli/#insiders.cli.CommandPyPIRegister","title":"CommandPyPIRegister  <code>dataclass</code>","text":"<pre><code>CommandPyPIRegister(\n    *,\n    help: bool = False,\n    username: str,\n    name: str,\n    description: str\n)\n</code></pre> <p>               Bases: <code>HelpOption</code></p> <p>Command to register a project name on PyPI.</p> <p>Attributes:</p> <ul> <li> <code>description</code>               (<code>str</code>)           \u2013            <p>Description of the project on PyPI.</p> </li> <li> <code>help</code>               (<code>bool</code>)           \u2013            <p>Print the program help and exit.</p> </li> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>Name to register.</p> </li> <li> <code>username</code>               (<code>str</code>)           \u2013            <p>Username on PyPI (your account).</p> </li> </ul>"},{"location":"reference/insiders/cli/#insiders.cli.CommandPyPIRegister.description","title":"description  <code>instance-attribute</code>","text":"<pre><code>description: str\n</code></pre> <p>Description of the project on PyPI.</p>"},{"location":"reference/insiders/cli/#insiders.cli.CommandPyPIRegister.help","title":"help  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>help: bool = False\n</code></pre> <p>Print the program help and exit.</p>"},{"location":"reference/insiders/cli/#insiders.cli.CommandPyPIRegister.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre> <p>Name to register.</p>"},{"location":"reference/insiders/cli/#insiders.cli.CommandPyPIRegister.username","title":"username  <code>instance-attribute</code>","text":"<pre><code>username: str\n</code></pre> <p>Username on PyPI (your account).</p>"},{"location":"reference/insiders/cli/#insiders.cli.HelpOption","title":"HelpOption  <code>dataclass</code>","text":"<pre><code>HelpOption(*, help: bool = False)\n</code></pre> <p>Reusable class to share a <code>-h</code>, <code>--help</code> option.</p> <p>Attributes:</p> <ul> <li> <code>help</code>               (<code>bool</code>)           \u2013            <p>Print the program help and exit.</p> </li> </ul>"},{"location":"reference/insiders/cli/#insiders.cli.HelpOption.help","title":"help  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>help: bool = False\n</code></pre> <p>Print the program help and exit.</p>"},{"location":"reference/insiders/cli/#insiders.cli.main","title":"main","text":"<pre><code>main(args: list[str] | None = None) -&gt; int\n</code></pre> <p>Run the main program.</p> <p>This function is executed when you type <code>insiders</code> or <code>python -m insiders</code>.</p> <p>Parameters:</p> <ul> <li> <code>args</code>               (<code>list[str] | None</code>, default:                   <code>None</code> )           \u2013            <p>Arguments passed from the command line.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>An exit code.</p> </li> </ul>"},{"location":"reference/insiders/cli/#insiders.cli.print_and_exit","title":"print_and_exit","text":"<pre><code>print_and_exit(\n    func: Callable[[], str | None], code: int = 0\n) -&gt; Callable[[], None]\n</code></pre> <p>Argument action callable to print something and exit immediately.</p> <p>Parameters:</p> <ul> <li> <code>func</code>               (<code>Callable[[], str | None]</code>)           \u2013            <p>A function that returns or prints a string.</p> </li> <li> <code>code</code>               (<code>int</code>, default:                   <code>0</code> )           \u2013            <p>The status code to exit with.</p> </li> </ul>"},{"location":"reference/insiders/debug/","title":"insiders.debug","text":""},{"location":"reference/insiders/debug/#insiders.debug","title":"debug","text":"<p>Debugging utilities.</p> <p>Classes:</p> <ul> <li> <code>Environment</code>           \u2013            <p>Dataclass to store environment information.</p> </li> <li> <code>Package</code>           \u2013            <p>Dataclass describing a Python package.</p> </li> <li> <code>Variable</code>           \u2013            <p>Dataclass describing an environment variable.</p> </li> </ul> <p>Functions:</p> <ul> <li> <code>get_debug_info</code>             \u2013              <p>Get debug/environment information.</p> </li> <li> <code>get_version</code>             \u2013              <p>Get version of the given distribution.</p> </li> <li> <code>print_debug_info</code>             \u2013              <p>Print debug/environment information.</p> </li> </ul>"},{"location":"reference/insiders/debug/#insiders.debug.Environment","title":"Environment  <code>dataclass</code>","text":"<pre><code>Environment(\n    interpreter_name: str,\n    interpreter_version: str,\n    interpreter_path: str,\n    platform: str,\n    packages: list[Package],\n    variables: list[Variable],\n)\n</code></pre> <p>Dataclass to store environment information.</p> <p>Attributes:</p> <ul> <li> <code>interpreter_name</code>               (<code>str</code>)           \u2013            <p>Python interpreter name.</p> </li> <li> <code>interpreter_path</code>               (<code>str</code>)           \u2013            <p>Path to Python executable.</p> </li> <li> <code>interpreter_version</code>               (<code>str</code>)           \u2013            <p>Python interpreter version.</p> </li> <li> <code>packages</code>               (<code>list[Package]</code>)           \u2013            <p>Installed packages.</p> </li> <li> <code>platform</code>               (<code>str</code>)           \u2013            <p>Operating System.</p> </li> <li> <code>variables</code>               (<code>list[Variable]</code>)           \u2013            <p>Environment variables.</p> </li> </ul>"},{"location":"reference/insiders/debug/#insiders.debug.Environment.interpreter_name","title":"interpreter_name  <code>instance-attribute</code>","text":"<pre><code>interpreter_name: str\n</code></pre> <p>Python interpreter name.</p>"},{"location":"reference/insiders/debug/#insiders.debug.Environment.interpreter_path","title":"interpreter_path  <code>instance-attribute</code>","text":"<pre><code>interpreter_path: str\n</code></pre> <p>Path to Python executable.</p>"},{"location":"reference/insiders/debug/#insiders.debug.Environment.interpreter_version","title":"interpreter_version  <code>instance-attribute</code>","text":"<pre><code>interpreter_version: str\n</code></pre> <p>Python interpreter version.</p>"},{"location":"reference/insiders/debug/#insiders.debug.Environment.packages","title":"packages  <code>instance-attribute</code>","text":"<pre><code>packages: list[Package]\n</code></pre> <p>Installed packages.</p>"},{"location":"reference/insiders/debug/#insiders.debug.Environment.platform","title":"platform  <code>instance-attribute</code>","text":"<pre><code>platform: str\n</code></pre> <p>Operating System.</p>"},{"location":"reference/insiders/debug/#insiders.debug.Environment.variables","title":"variables  <code>instance-attribute</code>","text":"<pre><code>variables: list[Variable]\n</code></pre> <p>Environment variables.</p>"},{"location":"reference/insiders/debug/#insiders.debug.Package","title":"Package  <code>dataclass</code>","text":"<pre><code>Package(name: str, version: str)\n</code></pre> <p>Dataclass describing a Python package.</p> <p>Attributes:</p> <ul> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>Package name.</p> </li> <li> <code>version</code>               (<code>str</code>)           \u2013            <p>Package version.</p> </li> </ul>"},{"location":"reference/insiders/debug/#insiders.debug.Package.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre> <p>Package name.</p>"},{"location":"reference/insiders/debug/#insiders.debug.Package.version","title":"version  <code>instance-attribute</code>","text":"<pre><code>version: str\n</code></pre> <p>Package version.</p>"},{"location":"reference/insiders/debug/#insiders.debug.Variable","title":"Variable  <code>dataclass</code>","text":"<pre><code>Variable(name: str, value: str)\n</code></pre> <p>Dataclass describing an environment variable.</p> <p>Attributes:</p> <ul> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>Variable name.</p> </li> <li> <code>value</code>               (<code>str</code>)           \u2013            <p>Variable value.</p> </li> </ul>"},{"location":"reference/insiders/debug/#insiders.debug.Variable.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre> <p>Variable name.</p>"},{"location":"reference/insiders/debug/#insiders.debug.Variable.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: str\n</code></pre> <p>Variable value.</p>"},{"location":"reference/insiders/debug/#insiders.debug.get_debug_info","title":"get_debug_info","text":"<pre><code>get_debug_info() -&gt; Environment\n</code></pre> <p>Get debug/environment information.</p> <p>Returns:     Environment information.</p>"},{"location":"reference/insiders/debug/#insiders.debug.get_version","title":"get_version","text":"<pre><code>get_version(dist: str = 'insiders') -&gt; str\n</code></pre> <p>Get version of the given distribution.</p> <p>Parameters:     dist: A distribution name.</p> <p>Returns:     A version number.</p> <p>Parameters:</p> <ul> <li> <code>dist</code>               (<code>str</code>, default:                   <code>'insiders'</code> )           \u2013            </li> </ul>"},{"location":"reference/insiders/debug/#insiders.debug.print_debug_info","title":"print_debug_info","text":"<pre><code>print_debug_info() -&gt; None\n</code></pre> <p>Print debug/environment information.</p>"},{"location":"reference/insiders/github/","title":"insiders.github","text":""},{"location":"reference/insiders/github/#insiders.github","title":"github","text":"<p>GitHub integration.</p> <p>Functions:</p> <ul> <li> <code>new_project</code>             \u2013              <p>Create a new Insiders project on GitHub (public and private repositories).</p> </li> </ul>"},{"location":"reference/insiders/github/#insiders.github.new_project","title":"new_project","text":"<pre><code>new_project(\n    *,\n    namespace: str,\n    repo: str,\n    description: str,\n    repo_path: str | Path,\n    insiders_repo_path: str | Path,\n    insiders_namespace: str | None = None,\n    insiders_repo: str | None = None,\n    username: str | None = None,\n    copier_template: str | None = None\n) -&gt; None\n</code></pre> <p>Create a new Insiders project on GitHub (public and private repositories).</p> <p>Parameters:</p> <ul> <li> <code>namespace</code>               (<code>str</code>)           \u2013            <p>Namespace of the public repository.</p> </li> <li> <code>repo</code>               (<code>str</code>)           \u2013            <p>Name of the public repository.</p> </li> <li> <code>description</code>               (<code>str</code>)           \u2013            <p>Shared description.</p> </li> <li> <code>repo_path</code>               (<code>str | Path</code>)           \u2013            <p>Local path in which to clone the public repository.</p> </li> <li> <code>insiders_repo_path</code>               (<code>str | Path</code>)           \u2013            <p>Local path in which to clone the insiders repository.</p> </li> <li> <code>insiders_namespace</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>Namespace of the insiders repository. Defaults to the public namespace.</p> </li> <li> <code>insiders_repo</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>Name of the insiders repository. Defaults to the public name.</p> </li> <li> <code>username</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>Username. Defaults to the public namespace value.</p> </li> <li> <code>copier_template</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>Copier template to initialize the local insiders repository with.</p> </li> </ul>"},{"location":"reference/insiders/pypi/","title":"insiders.pypi","text":""},{"location":"reference/insiders/pypi/#insiders.pypi","title":"pypi","text":"<p>PyPI integration.</p> <p>Functions:</p> <ul> <li> <code>reserve_pypi</code>             \u2013              <p>Reserve a name on PyPI.</p> </li> </ul>"},{"location":"reference/insiders/pypi/#insiders.pypi.reserve_pypi","title":"reserve_pypi","text":"<pre><code>reserve_pypi(\n    username: str, name: str, description: str\n) -&gt; None\n</code></pre> <p>Reserve a name on PyPI.</p> <p>Parameters:</p> <ul> <li> <code>username</code>               (<code>str</code>)           \u2013            <p>Username on PyPI.</p> </li> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>Name to reserve.</p> </li> <li> <code>description</code>               (<code>str</code>)           \u2013            <p>Description of the project on PyPI.</p> </li> </ul>"}]}